//
// Example application level use of Flatbuffers with WAMP.
//

/// We only need "uri" and "Void" (maybe move that elsewhere?)
include "wamp.fbs";


namespace com.example.accelstorage1;


/// One sample from accelerometer sensor.
struct AccelReading
{
    x: float;
    y: float;
    z: float;
}


/// A batch of samples from the accelerometer sensor.
table AccelSamples
{
    /// Unix epoch when sample batch was recorded (start thereof).
    sample_start: uint64;

    /// Sample length in ms.
    sample_period: uint16;

    /// Sample batch with accelerometer readings.
    samples: [AccelReading];
}


/// A time range.
table TimeRange
{
    /// Unix epoch start time or 0 for infinity into the past.
    start: uint64;

    /// Unix epoch end time or 0 for infinity into the future.
    endof: uint64;
}

namespace com.example.accelstorage2;

/// Player weapon status.
enum WeaponStatus: uint8
{
    /// Ready for action.
    OPERATIONAL = 1,

    /// Ammo empty.
    EMPTY = 2,

    /// Maintenance required.
    MAINTENANCE = 3,

    /// Finally broken. Throw away.
    BROKEN = 4
}

/// Define an interface for accelerometer storage services.
rpc_service AccelStorage (uuid: "4b740947-31d5-4a10-b7ce-4149bbc9ee1e")
{
    /// Store a sample batch. The time range of samples stored is returned.
    store (com.example.accelstorage1.AccelSamples): com.example.accelstorage1.TimeRange;

    /// Return last batch of samples stored within the given time range.
    get_last (com.example.accelstorage1.TimeRange): com.example.accelstorage1.AccelSamples;

    /// Event fired when a sample batch was stored. The time range of the stored samples is provided as event payload.
    on_store (wamp.Void): com.example.accelstorage1.TimeRange (streaming: "event");

    /// Retrieve all sample batches within the given time range. Sample batches are returned as streaming, "progressive results".
    retrieve (com.example.accelstorage1.TimeRange): com.example.accelstorage1.AccelSamples (streaming: "result");

    // NOTE: Further, the following 2 messaging patterns have been discussed,
    // but are currently not in the  WAMP spec

    /// Bulk upload a series of sample batches.
    upload (com.example.accelstorage1.AccelSamples): com.example.accelstorage1.TimeRange (streaming: "call");

    /// Compute running average of samples over time window, a full duplex stream or transformation.
    average (com.example.accelstorage1.AccelSamples): com.example.accelstorage1.AccelSamples (streaming: "transform");
}
